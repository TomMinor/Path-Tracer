digraph "GLWindow"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{GLWindow\n|+ m_verts\l+ m_scenePath\l+ m_cam\l+ test_vao\l+ renderThread\l- m_textureID\l- m_fboID\l- m_rboID\l- m_spinXFace\l- m_spinYFace\l- m_rotateActive\l- m_translateActive\l- m_origX\l- m_origY\l- m_origXPos\land 16 more...\l- s_vboNames\l|+ GLWindow()\l+ ~GLWindow()\l+ resetMouse()\l+ loadScene()\l+ renderScene()\l+ getScene()\l+ createFramebufferObject()\l+ createTextureObject()\l+ setScenePath()\l+ vboChanged()\l+ toggleNormals()\l+ toggleWireframe()\l+ setNormalSize()\l+ setScale()\l+ setTranslate()\l+ setRotate()\l+ setColour()\l+ setMatrixOrder()\l+ setEuler()\l# initializeGL()\l# resizeGL()\l# paintGL()\l- mouseMoveEvent()\l- mousePressEvent()\l- mouseReleaseEvent()\l- wheelEvent()\l- loadMatricesToShader()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{QGLWidget\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_scene" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{Renderer::Scene\n|- m_initialCameraView\l- m_primitives\l|+ Scene()\l+ objectBegin()\l+ objectEnd()\l+ getBackgroundColour()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_renderer_1_1_scene.html",tooltip="The Scene class represents the 3D world, mainly storing data about the object primitives. "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_background" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{Image::Pixel\n|+ m_r\l+ m_g\l+ m_b\l|+ Pixel()\l+ Pixel()\l+ operator+()\l+ operator-()\l+ operator/()\l+ operator*()\l+ operator/()\l+ operator*()\l+ operator+=()\l+ operator-=()\l+ operator*=()\l+ operator/=()\l+ operator*=()\l+ operator/=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_image_1_1_pixel.html",tooltip="The Pixel struct simply represents an RGB colour, overloads the +,-,/ and * operators. "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_axis" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{Axis\n|- m_shaderName\l- m_scale\l- m_cam\l- m_transform\l- m_globalMouseTx\l|+ Axis()\l+ ~Axis()\l+ draw()\l+ setCam()\l- loadMatricesToShader()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_axis.html",tooltip="Simple Axis drawing. "];
}
