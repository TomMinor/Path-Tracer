digraph "Renderer::RenderContext"
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{Renderer::RenderContext\n|+ m_imageWidth\l+ m_imageHeight\l+ m_samples\l+ m_aspectRatio\l+ m_depth\l+ m_outputPath\l|+ RenderContext()\l+ ~RenderContext()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +m_hit" ,arrowhead="odiamond",fontname="FreeSans"];
  Node2 [label="{Renderer::HitData\n|+ m_distanceSqr\l+ m_t\l+ m_u\l+ m_v\l+ m_w\l+ m_surfaceImpact\l+ m_surfaceNormal\l|+ HitData()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structRenderer_1_1HitData.html"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +m_object" ,arrowhead="odiamond",fontname="FreeSans"];
  Node3 [label="{Renderer::Primitive\n|# m_toWorldSpace\l# m_toObjectSpace\l|+ Primitive()\l+ ~Primitive()\l+ intersect()\l+ draw()\l+ sample()\l+ getNormal()\l+ rayToObjectSpace()\l+ rayToWorldSpace()\l+ getSurfaceMaterial()\l+ objectTransform()\l+ worldTransform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRenderer_1_1Primitive.html",tooltip="The Primitive class is the abstract class representing a renderer primitive, the intersect and draw m..."];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #m_material" ,arrowhead="odiamond",fontname="FreeSans"];
  Node4 [label="{Material\n|+ m_diffuse\l+ m_specularCoefficient\l+ m_type\l|+ Material()\l+ Material()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structMaterial.html",tooltip="The Material struct represents the properi. "];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +m_ray" ,arrowhead="odiamond",fontname="FreeSans"];
  Node5 [label="{Renderer::Ray\n|+ m_origin\l+ m_direction\l+ m_inverseDirection\l+ m_sign\l+ m_tmin\l+ m_tmax\l+ m_type\l|+ Ray()\l+ operator()()\l+ reflect()\l# inverseDirection()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structRenderer_1_1Ray.html"];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +m_renderCamera" ,arrowhead="odiamond",fontname="FreeSans"];
  Node6 [label="{Renderer::Camera\n||+ Camera()\l+ setFOV()\l+ setClippingPlanes()\l+ setCameraWorldSpace()\l+ getObjectSpaceMatrix()\l+ getWorldSpaceMatrix()\l+ getFOV()\l+ getAngle()\l+ getNearClipPlane()\l+ getfarClipPlane()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRenderer_1_1Camera.html",tooltip="The Camera class encapsulates just the render camera, providing methods to calculate FOV..."];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +m_scene" ,arrowhead="odiamond",fontname="FreeSans"];
  Node7 [label="{Renderer::Scene\n||+ Scene()\l+ objectBegin()\l+ objectEnd()\l+ getBackgroundColour()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRenderer_1_1Scene.html"];
}
